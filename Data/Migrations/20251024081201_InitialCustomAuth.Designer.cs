// <auto-generated />
using System;
using CTSAR.Booking.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CTSAR.Booking.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251024081201_InitialCustomAuth")]
    partial class InitialCustomAuth
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("CTSAR.Booking.Data.Alveole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EstActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Ordre")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Nom")
                        .IsUnique();

                    b.HasIndex("Ordre");

                    b.ToTable("Alveoles");
                });

            modelBuilder.Entity("CTSAR.Booking.Data.FermetureAlveole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlveoleId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("TEXT");

                    b.Property<string>("Raison")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("TypeFermeture")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AlveoleId");

                    b.ToTable("FermetureAlveoles");
                });

            modelBuilder.Entity("CTSAR.Booking.Data.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Commentaire")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("TEXT");

                    b.Property<int>("StatutReservation")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DateDebut");

                    b.HasIndex("DateFin");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("CTSAR.Booking.Data.ReservationAlveole", b =>
                {
                    b.Property<int>("ReservationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlveoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReservationId", "AlveoleId");

                    b.HasIndex("AlveoleId");

                    b.ToTable("ReservationAlveoles");
                });

            modelBuilder.Entity("CTSAR.Booking.Data.ReservationParticipant", b =>
                {
                    b.Property<int>("ReservationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateInscription")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EstMoniteur")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReservationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ReservationParticipants");
                });

            modelBuilder.Entity("CTSAR.Booking.Data.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CTSAR.Booking.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreferenceLangue")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CTSAR.Booking.Data.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("CTSAR.Booking.Data.FermetureAlveole", b =>
                {
                    b.HasOne("CTSAR.Booking.Data.Alveole", "Alveole")
                        .WithMany("Fermetures")
                        .HasForeignKey("AlveoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alveole");
                });

            modelBuilder.Entity("CTSAR.Booking.Data.Reservation", b =>
                {
                    b.HasOne("CTSAR.Booking.Data.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("CTSAR.Booking.Data.ReservationAlveole", b =>
                {
                    b.HasOne("CTSAR.Booking.Data.Alveole", "Alveole")
                        .WithMany("ReservationAlveoles")
                        .HasForeignKey("AlveoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTSAR.Booking.Data.Reservation", "Reservation")
                        .WithMany("ReservationAlveoles")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alveole");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("CTSAR.Booking.Data.ReservationParticipant", b =>
                {
                    b.HasOne("CTSAR.Booking.Data.Reservation", "Reservation")
                        .WithMany("Participants")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTSAR.Booking.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CTSAR.Booking.Data.UserRole", b =>
                {
                    b.HasOne("CTSAR.Booking.Data.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTSAR.Booking.Data.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CTSAR.Booking.Data.Alveole", b =>
                {
                    b.Navigation("Fermetures");

                    b.Navigation("ReservationAlveoles");
                });

            modelBuilder.Entity("CTSAR.Booking.Data.Reservation", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("ReservationAlveoles");
                });

            modelBuilder.Entity("CTSAR.Booking.Data.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CTSAR.Booking.Data.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
