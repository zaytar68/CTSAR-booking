@*
====================================================================
ThemeLanguageControls.razor : ContrÃ´les de thÃ¨me et langue
====================================================================
Ce composant affiche un sÃ©lecteur de langue avec dropdown et drapeaux,
et un bouton pour basculer entre le mode clair et le mode sombre.
Utilise MudBlazor pour le thÃ¨me et HTML/Bootstrap pour le sÃ©lecteur de langue.
*@

@using System.Globalization
@inject NavigationManager Navigation
@inject ThemeService ThemeService
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<CTSAR.Booking.Resources.Shared> Loc
@implements IDisposable

<div class="d-flex align-items-center gap-3 justify-content-end">
    @* SÃ©lecteur de langue avec drapeaux *@
    <div class="border rounded px-3 py-2 bg-white" style="min-width: 160px;">
        <select @bind="_currentCulture"
                @bind:after="OnCultureChangedAsync"
                class="form-select form-select-sm border-0 p-0"
                style="cursor: pointer; background-image: none;">
            <option value="fr">ðŸ‡«ðŸ‡· FranÃ§ais</option>
            <option value="de">ðŸ‡©ðŸ‡ª Deutsch</option>
            <option value="en">ðŸ‡¬ðŸ‡§ English</option>
        </select>
    </div>

    @* Switch thÃ¨me clair/foncÃ© - Simple bouton qui appelle le service *@
    <button type="button"
            class="btn btn-link p-2"
            @onclick="ToggleTheme"
            title="@(ThemeService.IsDarkMode ? Loc["LightMode"] : Loc["DarkMode"])">
        @if (ThemeService.IsDarkMode)
        {
            @* IcÃ´ne Soleil (mode clair) *@
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 16 16">
                <path d="M8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6zm0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z"/>
            </svg>
        }
        else
        {
            @* IcÃ´ne Lune (mode sombre) *@
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 16 16">
                <path d="M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278zM4.858 1.311A7.269 7.269 0 0 0 1.025 7.71c0 4.02 3.279 7.276 7.319 7.276a7.316 7.316 0 0 0 5.205-2.162c-.337.042-.68.063-1.029.063-4.61 0-8.343-3.714-8.343-8.29 0-1.167.242-2.278.681-3.286z"/>
            </svg>
        }
    </button>
</div>

@code {
    private string _currentCulture = "fr";

    protected override async Task OnInitializedAsync()
    {
        // Initialiser le ThemeService
        await ThemeService.InitializeAsync();

        // RÃ©cupÃ©rer la culture actuelle
        _currentCulture = CultureInfo.CurrentCulture.Name;

        // S'abonner aux Ã©vÃ©nements du ThemeService
        ThemeService.OnThemeChanged += StateHasChanged;
    }

    private Task OnCultureChangedAsync()
    {
        // Construire l'URL pour changer la culture
        var currentUri = new Uri(Navigation.Uri).PathAndQuery;
        var cultureUrl = $"/Culture/Set?culture={_currentCulture}&redirectUri={Uri.EscapeDataString(currentUri)}";

        // Forcer le rechargement complet de la page pour appliquer la nouvelle culture
        Navigation.NavigateTo(cultureUrl, forceLoad: true);

        return Task.CompletedTask;
    }

    private async Task ToggleTheme()
    {
        // Appeler le service pour changer le thÃ¨me
        await ThemeService.ToggleThemeAsync();
    }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= StateHasChanged;
    }
}
