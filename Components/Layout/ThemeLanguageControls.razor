@*
====================================================================
ThemeLanguageControls.razor : ContrÃ´les de thÃ¨me et langue
====================================================================
Ce composant affiche un sÃ©lecteur de langue avec dropdown et drapeaux,
et un bouton pour basculer entre le mode clair et le mode sombre.
*@

@rendermode InteractiveServer
@using System.Globalization
@inject NavigationManager Navigation
@inject ThemeService ThemeService
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<CTSAR.Booking.Resources.Shared> Loc
@implements IDisposable

<MudStack Row="true" Spacing="3" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
    @* SÃ©lecteur de langue avec drapeaux HTML simple *@
    <MudPaper Elevation="2" Class="d-flex align-center px-3 py-1" Style="min-width: 160px; cursor: pointer;">
        <select @bind="_currentCulture" @bind:after="OnCultureChangedAsync" class="mud-input-slot mud-input-root" style="border: none; background: transparent; cursor: pointer; font-size: 14px; width: 100%;">
            <option value="fr">ðŸ‡«ðŸ‡· FranÃ§ais</option>
            <option value="de">ðŸ‡©ðŸ‡ª Deutsch</option>
            <option value="en">ðŸ‡¬ðŸ‡§ English</option>
        </select>
    </MudPaper>

    @* Switch thÃ¨me clair/foncÃ© *@
    <MudIconButton Icon="@(ThemeService.IsDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"
                   Color="Color.Inherit"
                   Title="@(ThemeService.IsDarkMode ? Loc["LightMode"] : Loc["DarkMode"])"
                   OnClick="@ToggleTheme" />
</MudStack>

@code {
    private string _currentCulture = "fr";

    protected override async Task OnInitializedAsync()
    {
        // Initialiser le ThemeService
        await ThemeService.InitializeAsync();

        // RÃ©cupÃ©rer la culture actuelle
        _currentCulture = CultureInfo.CurrentCulture.Name;

        // S'abonner aux Ã©vÃ©nements du ThemeService
        ThemeService.OnThemeChanged += StateHasChanged;
    }

    private Task OnCultureChangedAsync()
    {
        // Construire l'URL pour changer la culture
        var currentUri = new Uri(Navigation.Uri).PathAndQuery;
        var cultureUrl = $"/Culture/Set?culture={_currentCulture}&redirectUri={Uri.EscapeDataString(currentUri)}";

        // Forcer le rechargement complet de la page pour appliquer la nouvelle culture
        Navigation.NavigateTo(cultureUrl, forceLoad: true);

        return Task.CompletedTask;
    }

    private async Task ToggleTheme()
    {
        await ThemeService.ToggleThemeAsync();
    }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= StateHasChanged;
    }
}
