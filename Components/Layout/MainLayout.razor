@*
====================================================================
MainLayout.razor : Layout principal de l'application
====================================================================
Ce composant d√©finit la structure globale de l'application avec
la sidebar (NavMenu) et les contr√¥les de th√®me/langue.
Utilise MudBlazor pour la gestion automatique du th√®me.
*@

@inherits LayoutComponentBase
@inject ThemeService ThemeService
@implements IDisposable

@* MudBlazor Theme Provider : G√®re automatiquement le dark/light mode *@
<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <ThemeLanguageControls />
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled exception has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">üóô</span>
</div>

@code {
    private bool _isDarkMode = false;

    protected override async Task OnInitializedAsync()
    {
        // Initialiser le ThemeService et charger les pr√©f√©rences
        await ThemeService.InitializeAsync();

        // Charger l'√©tat du th√®me depuis le service
        _isDarkMode = ThemeService.IsDarkMode;

        // S'abonner aux changements de th√®me
        ThemeService.OnThemeChanged += OnThemeChanged;
    }

    private void OnThemeChanged()
    {
        // Mettre √† jour l'√©tat local quand le service change
        _isDarkMode = ThemeService.IsDarkMode;
        StateHasChanged();
    }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= OnThemeChanged;
    }
}
