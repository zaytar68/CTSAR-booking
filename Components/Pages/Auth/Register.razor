@page "/register"
@rendermode InteractiveServer

@using CTSAR.Booking.Services
@using CTSAR.Booking.Data
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies

@inject AuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject IStringLocalizer<CTSAR.Booking.Resources.Auth> Loc
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>@Loc["RegisterTitle"]</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
    <MudPaper Elevation="3" Class="pa-6">
        <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true">
            @Loc["RegisterTitle"]
        </MudText>
        <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-6">
            @Loc["RegisterSubtitle"]
        </MudText>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mb-4">
                @errorMessage
            </MudAlert>
        }

        <MudForm @ref="form" @bind-IsValid="@isFormValid">
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="prenom"
                                  Label="@Loc["FirstName"]"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  RequiredError="@Loc["FirstNameRequired"]" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="nom"
                                  Label="@Loc["LastName"]"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  RequiredError="@Loc["LastNameRequired"]" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="email"
                                  Label="@Loc["Email"]"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Email"
                                  Required="true"
                                  RequiredError="@Loc["EmailRequired"]"
                                  Validation="@(new Func<string, string>(ValidateEmail))" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="password"
                                  Label="@Loc["Password"]"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password"
                                  Required="true"
                                  RequiredError="@Loc["PasswordRequired"]"
                                  Validation="@(new Func<string, string>(ValidatePassword))" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="confirmPassword"
                                  Label="@Loc["ConfirmPassword"]"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password"
                                  Required="true"
                                  RequiredError="@Loc["ConfirmPasswordRequired"]"
                                  Validation="@(new Func<string, string>(ValidateConfirmPassword))" />
                </MudItem>
                <MudItem xs="12">
                    <MudSelect @bind-Value="selectedRole"
                               Label="@Loc["Role"]"
                               Variant="Variant.Outlined"
                               Required="true">
                        <MudSelectItem Value="@RoleNames.Membre">@Loc["RoleMembre"]</MudSelectItem>
                        <MudSelectItem Value="@RoleNames.Moniteur">@Loc["RoleMoniteur"]</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="true"
                       Class="mt-6"
                       OnClick="HandleRegister"
                       Disabled="isLoading">
                @if (isLoading)
                {
                    <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                    @Loc["CreatingAccount"]
                }
                else
                {
                    @Loc["RegisterButton"]
                }
            </MudButton>
        </MudForm>

        <MudDivider Class="my-6" />

        <MudText Align="Align.Center">
            @Loc["AlreadyHaveAccount"]
            <MudLink Href="/login">@Loc["LoginHere"]</MudLink>
        </MudText>
    </MudPaper>
</MudContainer>

@code {
    private MudForm? form;
    private bool isFormValid;
    private bool isLoading;
    private string email = "";
    private string password = "";
    private string confirmPassword = "";
    private string nom = "";
    private string prenom = "";
    private string selectedRole = RoleNames.Membre;
    private string? errorMessage;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string ValidateEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return Loc["EmailRequired"];

        if (!email.Contains("@"))
            return Loc["EmailInvalid"];

        return string.Empty;
    }

    private string ValidatePassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
            return Loc["PasswordRequired"];

        if (password.Length < 6)
            return Loc["PasswordTooShort"];

        return string.Empty;
    }

    private string ValidateConfirmPassword(string confirmPassword)
    {
        if (string.IsNullOrWhiteSpace(confirmPassword))
            return Loc["ConfirmPasswordRequired"];

        if (confirmPassword != password)
            return Loc["PasswordMismatch"];

        return string.Empty;
    }

    private async Task HandleRegister()
    {
        errorMessage = null;
        isLoading = true;

        try
        {
            // Valider le formulaire
            await form!.Validate();

            if (!isFormValid)
            {
                isLoading = false;
                return;
            }

            // Créer l'utilisateur
            var (success, error, user) = await AuthService.RegisterAsync(
                email, password, nom, prenom, selectedRole);

            if (!success || user == null)
            {
                errorMessage = error ?? Loc["RegisterError"];
                isLoading = false;
                return;
            }

            // Récupérer les rôles de l'utilisateur
            var roles = user.UserRoles.Select(ur => ur.Role.Name).ToList();

            // Créer les claims
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, user.Email),
                new Claim(ClaimTypes.Email, user.Email),
                new Claim(ClaimTypes.NameIdentifier, user.Id.ToString())
            };

            foreach (var role in roles)
            {
                claims.Add(new Claim(ClaimTypes.Role, role));
            }

            // Créer l'identité et le principal
            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);

            // Se connecter automatiquement après l'inscription
            var httpContext = HttpContextAccessor.HttpContext;
            if (httpContext != null)
            {
                await httpContext.SignInAsync(
                    CookieAuthenticationDefaults.AuthenticationScheme,
                    principal,
                    new AuthenticationProperties
                    {
                        IsPersistent = false,
                        ExpiresUtc = DateTimeOffset.UtcNow.AddHours(8)
                    });
            }

            // Mettre à jour l'état d'authentification
            if (AuthStateProvider is CustomAuthenticationStateProvider customProvider)
            {
                customProvider.MarkUserAsAuthenticated(user.Email, user.Id, roles);
            }

            // Rediriger vers la page d'accueil
            Navigation.NavigateTo(ReturnUrl ?? "/", forceLoad: true);
        }
        catch (Exception ex)
        {
            errorMessage = Loc["UnexpectedError"];
            Console.WriteLine($"Erreur lors de l'inscription : {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
