@using CTSAR.Booking.Services
@using CTSAR.Booking.DTOs
@using Microsoft.Extensions.Localization
@using CTSAR.Booking.Components.Pages.Admin
@inject AlveoleService AlveoleService
@inject IStringLocalizer<Alveoles> Loc

<MudDialog>
    <DialogContent>
        <MudForm @ref="_form" @bind-IsValid="@_isValid">
            <MudTextField @bind-Value="_nom"
                          Label="@Loc["Name"]"
                          Required="true"
                          RequiredError="@Loc["NameRequired"]"
                          Validation="@(new Func<string, string?>(ValidateName))"
                          Immediate="true"
                          MaxLength="50"
                          Counter="50"
                          HelperText="@Loc["NameHelperText"]" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@Loc["Cancel"]</MudButton>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="Submit"
                   Disabled="@(!_isValid || _submitting)">
            @if (_submitting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">@Loc["Creating"]</MudText>
            }
            else
            {
                @Loc["Create"]
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    public MudBlazor.IDialogReference? DialogRef { get; set; }

    private MudForm _form = null!;
    private bool _isValid;
    private bool _submitting;
    private string _nom = string.Empty;

    private string? ValidateName(string nom)
    {
        if (string.IsNullOrWhiteSpace(nom))
            return Loc["NameRequired"];

        if (nom.Length > 50)
            return Loc["NameTooLong"];

        return null;
    }

    private async Task Submit()
    {
        await _form.Validate();
        if (!_isValid) return;

        _submitting = true;
        try
        {
            var result = await AlveoleService.CreateAlveoleAsync(_nom.Trim());
            if (result.Success)
            {
                DialogRef?.Close(DialogResult.Ok(result.Alveole));
            }
            else
            {
                // Afficher l'erreur dans le formulaire
                await _form.Validate();
            }
        }
        finally
        {
            _submitting = false;
        }
    }

    private void Cancel()
    {
        DialogRef?.Close(DialogResult.Cancel());
    }
}
