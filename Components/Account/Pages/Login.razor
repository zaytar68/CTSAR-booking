@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using CTSAR.Booking.Data
@using Microsoft.Extensions.Localization

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IStringLocalizer<Login> Loc

<PageTitle>@Loc["LoginTitle"]</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body p-4">
                    <!-- En-tÃªte -->
                    <div class="text-center mb-4">
                        <h2>@Loc["LoginTitle"]</h2>
                        <p class="text-muted">@Loc["LoginSubtitle"]</p>
                    </div>

                    <hr />

                    <!-- Message d'erreur -->
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }

                    <!-- Formulaire de connexion -->
                    <form method="post" @formname="login">
                        <AntiforgeryToken />

                        <div class="mb-3">
                            <label for="email" class="form-label">@Loc["Email"]</label>
                            <input @bind="Input.Email"
                                   class="form-control"
                                   id="email"
                                   name="Input.Email"
                                   type="email"
                                   autocomplete="username"
                                   required
                                   placeholder="@Loc["Email"]" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">@Loc["Password"]</label>
                            <input @bind="Input.Password"
                                   class="form-control"
                                   id="password"
                                   name="Input.Password"
                                   type="password"
                                   autocomplete="current-password"
                                   required
                                   placeholder="@Loc["Password"]" />
                        </div>

                        <div class="mb-3 form-check">
                            <input @bind="Input.RememberMe"
                                   class="form-check-input"
                                   id="rememberMe"
                                   name="Input.RememberMe"
                                   type="checkbox" />
                            <label class="form-check-label" for="rememberMe">
                                @Loc["RememberMe"]
                            </label>
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-lg">
                                @Loc["LoginButton"]
                            </button>
                        </div>
                    </form>

                    <hr class="my-4" />

                    <!-- Liens utiles -->
                    <div class="text-center">
                        <p>
                            <a href="Account/ForgotPassword">@Loc["ForgotPassword"]</a>
                        </p>
                        <p>
                            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                                @Loc["RegisterNewUser"]
                            </a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
        else if (HttpMethods.IsPost(HttpContext.Request.Method))
        {
            // This doesn't count login failures towards account lockout
            // To enable password failures to trigger account lockout, set lockoutOnFailure: true
            var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
            if (result.Succeeded)
            {
                Logger.LogInformation("User logged in.");
                RedirectManager.RedirectTo(ReturnUrl);
            }
            else if (result.IsLockedOut)
            {
                Logger.LogWarning("User account locked out.");
                RedirectManager.RedirectTo("Account/Lockout");
            }
            else
            {
                errorMessage = Loc["LoginError"];
            }
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
