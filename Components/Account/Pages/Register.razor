@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using CTSAR.Booking.Data
@using Microsoft.Extensions.Localization

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IStringLocalizer<Register> Loc

<PageTitle>@Loc["RegisterTitle"]</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body p-4">
                    <!-- En-tête -->
                    <div class="text-center mb-4">
                        <h2>@Loc["RegisterTitle"]</h2>
                        <p class="text-muted">@Loc["RegisterSubtitle"]</p>
                    </div>

                    <hr />

                    <!-- Messages d'erreur -->
                    @if (identityErrors is not null)
                    {
                        <div class="alert alert-danger" role="alert">
                            <ul class="mb-0">
                                @foreach (var error in identityErrors)
                                {
                                    <li>@error.Description</li>
                                }
                            </ul>
                        </div>
                    }

                    <!-- Formulaire d'inscription -->
                    <form method="post" @formname="register">
                        <AntiforgeryToken />

                        <div class="mb-3">
                            <label for="email" class="form-label">@Loc["Email"]</label>
                            <input @bind="Input.Email"
                                   class="form-control"
                                   id="email"
                                   name="Input.Email"
                                   type="email"
                                   autocomplete="username"
                                   required
                                   placeholder="@Loc["Email"]" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">@Loc["Password"]</label>
                            <input @bind="Input.Password"
                                   class="form-control"
                                   id="password"
                                   name="Input.Password"
                                   type="password"
                                   autocomplete="new-password"
                                   required
                                   minlength="6"
                                   placeholder="@Loc["Password"]" />
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">@Loc["ConfirmPassword"]</label>
                            <input @bind="Input.ConfirmPassword"
                                   class="form-control"
                                   id="confirmPassword"
                                   name="Input.ConfirmPassword"
                                   type="password"
                                   autocomplete="new-password"
                                   required
                                   placeholder="@Loc["ConfirmPassword"]" />
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-lg">
                                @Loc["RegisterButton"]
                            </button>
                        </div>
                    </form>

                    <hr class="my-4" />

                    <!-- Lien de connexion -->
                    <div class="text-center">
                        <p>
                            @Loc["AlreadyHaveAccount"]
                            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                                @Loc["LoginHere"]
                            </a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsPost(HttpContext.Request.Method))
        {
            var user = CreateUser();

            await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
            var emailStore = GetEmailStore();
            await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
            var result = await UserManager.CreateAsync(user, Input.Password);

            if (!result.Succeeded)
            {
                identityErrors = result.Errors;
                return;
            }

            Logger.LogInformation("User created a new account with password.");

            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

            await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

            if (UserManager.Options.SignIn.RequireConfirmedAccount)
            {
                RedirectManager.RedirectTo(
                    "Account/RegisterConfirmation",
                    new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
            }

            await SignInManager.SignInAsync(user, isPersistent: false);
            RedirectManager.RedirectTo(ReturnUrl);
        }
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
