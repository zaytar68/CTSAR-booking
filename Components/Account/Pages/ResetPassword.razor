@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using CTSAR.Booking.Data
@using Microsoft.Extensions.Localization

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager
@inject IStringLocalizer<ResetPassword> Loc

<PageTitle>@Loc["Title"]</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow">
                <div class="card-body p-4">
                    <h1 class="card-title text-center mb-3">@Loc["Title"]</h1>
                    <p class="text-muted text-center mb-4">@Loc["Subtitle"]</p>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }

                    <form method="post" @formname="reset-password">
                        <AntiforgeryToken />

                        <input type="hidden" name="Input.Code" value="@Input.Code" />

                        <div class="mb-3">
                            <label for="email" class="form-label">@Loc["Email"]</label>
                            <input @bind="Input.Email"
                                   class="form-control"
                                   id="email"
                                   name="Input.Email"
                                   type="email"
                                   autocomplete="username"
                                   required
                                   placeholder="nom@exemple.com" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">@Loc["Password"]</label>
                            <input @bind="Input.Password"
                                   class="form-control"
                                   id="password"
                                   name="Input.Password"
                                   type="password"
                                   autocomplete="new-password"
                                   required
                                   minlength="6"
                                   placeholder="@Loc["Password"]" />
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">@Loc["ConfirmPassword"]</label>
                            <input @bind="Input.ConfirmPassword"
                                   class="form-control"
                                   id="confirmPassword"
                                   name="Input.ConfirmPassword"
                                   type="password"
                                   autocomplete="new-password"
                                   required
                                   placeholder="@Loc["ConfirmPassword"]" />
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-lg">
                                @Loc["ResetButton"]
                            </button>
                        </div>
                    </form>

                    <hr class="my-4" />

                    <div class="text-center">
                        <p>
                            <a href="Account/Login">@Loc["BackToLogin"]</a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsPost(HttpContext.Request.Method))
        {
            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user is null)
            {
                // Don't reveal that the user does not exist
                RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
            }

            var result = await UserManager.ResetPasswordAsync(user!, Input.Code, Input.Password);
            if (result.Succeeded)
            {
                RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
            }

            identityErrors = result.Errors;
            errorMessage = $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}
